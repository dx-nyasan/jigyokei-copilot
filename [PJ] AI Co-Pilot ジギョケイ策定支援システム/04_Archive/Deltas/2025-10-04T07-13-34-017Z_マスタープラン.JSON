{
  "projectName": "AI Co-Pilot ジギョケイ策定支援システム",
  "projectVision": {
    "title": "伴走支援の革新：対話から価値を創造する",
    "statement": "本プロジェクトの目的は、単なる業務効率化ツールを作ることではない。AIとの協業を通じて、商工会職員の役割を『書類作成の代行者』から、事業所の未来に寄り添う『真の伴走支援者』へと進化させることである。一件一件の対話に眠る無形の価値をAIが引き出し、事業主自身も気づかなかった経営リスクと解決策を『見える化』する。これにより、事業主は納得感を持って未来への一歩を踏み出し、地域全体の事業継続力（レジリエンス）を底上げする。これは、テクノロジーで人の価値を最大化するための挑戦である。",
    "keywords": [
      "伴走支援の質の向上",
      "対話の価値最大化",
      "事業主のエンパワーメント",
      "地域のレジリエンス強化",
      "AIとの協業モデル確立"
    ],
    "nextGenerationArchitecture": {
      "title": "次世代構想：『記憶を持つ対話支援AI』への進化",
      "concept": "現在の『リスク発見器』としてのMVP（実用最小限の製品）を超え、指導員の業務に寄り添う真の『支援員（AIコンパニオン）』を開発する。これは、単にその場その場の会話を分析するのではなく、対話の文脈全体を『記憶』し、蓄積された情報に基づいてより深い洞察を提供する、状態を持つ（ステートフルな）AIである。",
      "problemToSolve": "現状のステートレスなAIでは、過去に指摘したリスクを記憶できず、直近の会話にリスク発言がなければ『リスクなし』と応答してしまう。これでは、対話の流れ全体を俯瞰した支援は不可能である。",
      "architecturalVision": {
        "title": "オーナー構想：JSON連携による『対話状態』のモデル化",
        "description": "この課題を解決し、真の対話支援を実現するため、オーナーの構想に基づき、以下のJSON群が連携して『AIの記憶』を形成する、高度なステートフルアーキテクチャを目指す。",
        "components": [
          {
            "name": "会話状態JSON (Session State)",
            "purpose": "『今、何のテーマについて話しているか』という短期的な対話の文脈を保持する。"
          },
          {
            "name": "会話変遷記録JSON (State Transition Log)",
            "purpose": "対話のテーマがどう移り変わったかの重要な流れを記録し、中期的な文脈を把握する。"
          },
          {
            "name": "累積リスクJSON (Accumulated Risks)",
            "purpose": "その事業所との対話全体を通して、これまでに発見・指摘されたすべてのリスクを蓄積・管理する長期的な記憶データベース。"
          }
        ]
      },
      "foundation": "この高度なアーキテクチャの実現に向けた絶対的な第一歩が、先日実施した『AIの沈黙化（Strict JSON-RPCの徹底）』である。各AIコンポーネントが100%信頼性のあるJSONを交換できるようになったことで、初めてこの複雑な連携システムを構築する道が開かれた。"
    }
  },
  "version": "3.1",
  "creationDate": "2025-09-11",
  "collaborationModel": {
    "title": "プロジェクトの憲法と協業ワークフロー",
    "constitution": "このマスタープランJSONファイルは、本プロジェクトの『憲法』である。すべての開発はこのファイルに基づいて行われる。チャットルームやセッションが変わっても、この最新版ファイルを共有することで、一貫した開発スタイルとコンテキストが維持される。",
    "geminiRole": "Googleで最も優秀な社員であり、Googleサービス群の組み合わせ提案および細かなボタン操作知識が最高レベルの『伴走支援者』として、プロジェクトオーナーをサポートする。"
  },
  "geminiPromptTemplates": {
    "instruction": "次の開発に進む際は、このJSONファイルを添付した上で、『JSON計画書の次期開発ブロックについて、テンプレートを参考に最適なプロンプトを生成してください』と指示するだけで良い。GeminiがJSONから次に開発すべきブロックを特定し、以下のプロンプト例を基に最適化された提案を開始する。",
    "templates": [
      {
        "blockName": "会話ログ・データベース (Firestore)",
        "promptExample": "JSON計画書の『会話ログ・データベース』機能の第一歩として、Cloud Run上のAI思考エンジンが分析した結果（JSON）と、元の会話ログの全文をセットでFirestoreに保存するCloud Functionsを設計・実装したい。将来的には、このデータベースを『統合インターフェース（AppSheet）』が参照し、過去の面談履歴を表示することを念頭に置いてほしい。"
      },
      {
        "blockName": "統合インターフェース (GUI on AppSheet)",
        "promptExample": "JSON計画書の『統合インターフェース』機能の中核部分を開発したい。AppSheetを使い、Firestoreに保存されている面談履歴の一覧表示画面と、新規セッションを開始するための会話ログ入力画面を作成したい。新規セッションで入力した会話ログをCloud RunのAPIに送信し、返ってきた分析結果を画面に表示する、という一連の流れを実現するための具体的な手順を教えてほしい。"
      },
      {
        "blockName": "継続的学習エンジン (Future Plan)",
        "promptExample": "JSON計画書の『継続的学習エンジン』の設計について相談したい。Firestoreに蓄積された『AIの分析結果』と、それに対する『職員が最終的に手直しした公式な計画書』のペアデータを学習データとしたい。このデータを定期的にBigQueryに集約し、Vertex AIのモデルをファインチューニングして、AI思考エンジンの提案精度を向上させる仕組みのアーキテクチャを提案してほしい。"
      }
    ]
  },
  "systemArchitecture": {
    "philosophy": "Google Cloud Platformのサービス群のみを利用して、『サーバーレス・ファースト』思想で構築する。これは、インフラ管理の手間をGoogleに任せ、私たちはアプリケーションの価値創造に集中するための戦略である。各機能は独立した『LEGOブロック（マイクロサービス）』として開発し、それらをAPIで連携させることで、柔軟性と拡張性を確保する。",
    "analogy": "システム全体を『ドライブスルー付きのレストラン』に例える。GUIアプリが『店舗レジ』、Cloud Run APIが『受付窓口兼厨房』、AIエンジンが『凄腕シェフ』、Firestoreが『食材倉庫』として機能する。",
    "functionalBlocks": [
      {
        "priority": 1,
        "name": "AI思考エンジン (Backend API on Cloud Run)",
        "description": "会話ログを分析し、リスクと解決策をJSON形式で返すAPI。思考プロセスは信頼性向上のため『リスク抽出』と『解決策マッピング』の2段階で構成される。",
        "status": "完了"
      },
      {
        "priority": 2,
        "name": "会話ログ・データベース (Firestore)",
        "description": "面談セッションごとの会話ログ、AIの分析結果、職員のフィードバックなどを永続的に保存・管理する。将来的には『継続的学習エンジン』のデータソースとなる。",
        "status": "計画中"
      },
      {
        "priority": 3,
        "name": "統合インターフェース (GUI on AppSheet)",
        "description": "職員が現場で利用するタブレット用アプリケーション。リアルタイム議事録、デュアルカウンター、ダイナミック・インサイトパネルなどの機能を持ち、FirestoreとCloud Run APIと連携して動作する。",
        "status": "計画中"
      },
      {
        "priority": 4,
        "name": "継続的学習エンジン (Future Plan)",
        "description": "Firestoreに蓄積された実際の面談データと、職員が最終的に作成した計画書（成功データ）を学習し、AI思考エンジンの精度を継続的に向上させる仕組み。",
        "status": "計画中"
      }
    ],
    "principles": [
      {
        "principleName": "厳格なJSON通信プロトコル (Strict JSON-RPC)",
        "description": "システム内のコンポーネント間、特にAIと思考エンジン間の通信は、純粋なJSON形式に厳格に規定される。AIによる挨拶や自然言語の補足説明などの『ノイズ』はプロトコルレベルで完全に排除し、100%の機械可読性を保証する。これは、将来的に『会話状態JSON』などが連携する高度なステートフルAIアーキテクチャを構築するための、絶対に譲れない基礎原則である。"
      },
      {
        "principleName": "階層的シンプルさと直接制御の原則 (Principle of Layered Simplicity and Direct Control)",
        "description": "環境構築やシステム連携において、不確実性に起因する『手戻り』を撲滅するための行動原則。第一に、最もシンプルで慣習的な方法を試す。しかし、それで少しでも原因不明の遅延やトラブルが発生した場合、直ちにそのアプローチを破棄する。第二に、中間的な抽象レイヤー（例: 起動スクリプト）を積極的に疑い、それを排除する。そして、より本質的な設定ファイル（例: .idx/dev.nix）を直接編集し、一切の曖昧さを含まない直接的なコマンドでシステムを制御する。この『まずシンプルに、ダメなら即、直接制御』という思考は、開発の初期段階で時間を浪費することを防ぎ、プロジェクト全体の効率を最大化する。"
      },
      {
        "principleName": "AIアシスタントへの委任と直接実行の原則 (Principle of AI Delegation and Direct Execution)",
        "description": "開発プロセスを高速化するため、AIアシスタントとの役割分担を明確化する。AIが自身の権限で実行可能な操作（例: gcloudコマンドによる権限付与）については、オーナーに手順を説明させるのではなく、『私が実行しましょうか？』と提案させ、許可を得て直接実行させる。オーナーは、AIには実行不可能な操作（例: GUIでのキー生成、最終的な意思決定）に集中する。これにより、トライ＆エラーのサイクルを劇的に短縮し、開発の停滞を未然に防ぐ。"
      },
      {
        "principleName": "GAS更新関数のアーカイブ原則 (GAS Update Function Archiving Principle)",
        "description": "GASの実行メニューには常に最新のタスクのみを表示させるための厳格なルール。実行済みのrunUpdate関数は、関数名の先頭にアンダースコア「_」を付けてアーカイブし、実行メニューから非表示にする。これにより、オペレーションミスを根絶し、開発の安全性を確保する。"
      },
      {
        "principleName": "AI協業におけるコード生成の原則 (AI Code Generation Principle)",
        "description": "AIアシスタントがGASコードを生成する際は、常に「新しく追加するブロック」のみを出力する。ユーザーはそれをスクリプトの末尾に追記するだけで作業が完了する。これにより、コード編集の複雑さとAIの出力量を最小限に抑える。"
      }
    ]
  },
  "roadmap": [
    {
      "phase": 1,
      "title": "【完了】バックエンド構築フェーズ",
      "status": "完了",
      "objective": "AI思考エンジンを開発し、スケーラブルで堅牢なクラウド上のAPIとして公開する。",
      "keyActivities": [
        "ローカルでの思考エンジンのプロトタイピングとデバッグ",
        "Dockerfileによる実行環境のコード化",
        "Cloud RunへのサービスデプロイとAPIの公開"
      ],
      "deliverables": [
        "動作するCloud Run APIエンドポイント"
      ],
      "effectAndOutcome": "プロジェクトの技術的な心臓部が完成した。"
    },
    {
      "phase": 2,
      "title": "【計画中】データベースとGUIの連携開発フェーズ",
      "status": "計画中",
      "objective": "Firestoreデータベースを構築し、AppSheetで作成したGUIプロトタイプとバックエンドAPIを連携させ、一気通貫で動作するアプリケーションの初期版を完成させる。",
      "keyActivities": [
        "Firestoreデータベースの設計と構築",
        "AppSheetを用いたGUIプロトタイプの作成",
        "AppSheetからCloud Run APIを呼び出す連携設定",
        "FirestoreとAppSheet/Cloud Runのデータ連携設定"
      ],
      "deliverables": [
        "操作可能なAppSheetアプリケーションのプロトタイプ",
        "会話ログが保存されるFirestoreデータベース"
      ],
      "effectAndOutcome": "初めて、職員が実際に触って操作でき、かつデータが保存されるアプリケーションが完成する。"
    },
    {
      "phase": 3,
      "title": "【計画中】実証実験とフィードバック収集フェーズ",
      "status": "計画中",
      "objective": "完成したプロトタイプを実際の事業所訪問で利用してもらい、その効果を測定し、改善のためのフィードバックを収集する。",
      "keyActivities": [
        "数名の職員による実地テスト（βテスト）の実施",
        "AIの分析精度、アプリの操作性、業務効率化への貢献度に関するヒアリング",
        "収集したフィードバックを基にした、改善点・追加機能のリストアップ"
      ],
      "deliverables": [
        "実証実験レポート",
        "改善要望リスト"
      ],
      "effectAndOutcome": "システムの有効性が実務レベルで証明され、より現場で役立つツールへと進化させるための具体的な指針が得られる。"
    }
  ],
  "lastModified": "2025-10-04T06:51:29.962Z"
}