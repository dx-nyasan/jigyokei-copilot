思考メモ⑤
序論：AIとの共創 - 中小企業支援の未来を描く開発の軌跡
本稿は、一個の中小企業支援のアイデアが、AIアシスタントとの濃密な対話を通じて、壮大なシステム構想へと昇華し、度重なる試練を乗り越えて具体的な形を成していくまでの全記録である。物語は、多くの中小企業が策定に苦慮する「事業継続力強化計画（通称：ジギョケイ）」の策定支援を、いかにして効率化し、その質を向上させるかという問いから始まる。この課題に対し、単なる業務効率化に留まらない、事業所の満足度を最大化させ、商工会の支援業務そのものを革新する「AI Co-Pilot ジギョケイ策定支援システム」の創出を目指す、一人の開発者とAI（Gemini）との知的冒険が幕を開けた。

それは、華麗な成功物語ではない。アイデアがコードとなり、現実世界の複雑な壁に突き当たり、エラーとデバッグの泥臭い格闘を繰り返す。その過程で、当初の設計思想は批判的に検討され、AIの「知性」そのものとの対峙を経て、より洗練され、より堅牢なアーキテクチャへと進化を遂げていく。PowerShellの難解な仕様、文字コードの深淵、クラウドサービスの複雑な設定、そしてAI自身の予測不可能性。これら数々の障害は、単なる障壁ではなく、システムを、そして開発者自身を成長させるための不可欠な触媒であった。

これは、未来の伴走支援の理想形を追い求めた、人間とAIの共創の記録であり、一つのアイデアが試練を経ていかにして知性を獲得し、現実の価値へと転換されていくかを示す、ソフトウェア開発の原風景そのものである。

第一章：構想の黎明 - 「対話」から生まれる伴走支援の設計図
プロジェクトの出発点は、商工会職員と事業所経営者、双方の負担を軽減しつつ、本質的なリスク対策を導き出すための具体的な仕組みづくりであった。初期構想として提示されたのは、デジタル技術と対面での対話を融合させた「商工会と創る『ジギョケイ策定』伴走支援パッケージ」である。これは、スマートフォンの事前アンケートで経営者の課題意識を把握し、訪問時には会話を録音して職員が対話に集中、その場でプロジェクターに課題を「見える化」し、最終的な計画書作成はAIで自動化するという、効率性と対話の質を両立させる先進的なものであった。

しかし、対話はすぐに、より野心的な目標へと収斂していく。「ほとんど会話するだけでジギョケイができる仕組み」、すなわち事業所の負担を極限まで減らし、商工会の「伴走支援」という理念を最高次元で実現する**「AI Co-Pilot ジギョケイシステム」**の構想である。このシステムは、策定プロセスを4つのフェーズに分割し、各段階でAIが能動的に介在することで、徹底的な自動化と支援の高度化を目指すものとして再定義された。

事前準備フェーズ: 職員が訪問先を登録するだけで、AIが自動で事前ヒアリングを送信。回答内容と住所情報から、パーソナライズされたハザードマップや財務インパクトの試算レポートを生成し、訪問前に経営者の当事者意識を高める。

訪問・対話フェーズ: 職員は会話に集中するだけ。タブレットアプリがリアルタイムで会話を文字起こしし、AIが経営者の発言からリスクを自動でタグ付け。さらに、会話の文脈に応じて関連する業界データや補助金情報を画面に表示する**「ダイナミック・インサイトパネル」、そして計画策定の進捗を可視化する「デュアルカウンター」**（リスクのカウントアップと達成度のカウントダウン）といった機能により、対話の質を経営相談のレベルへと引き上げる。

自動生成フェーズ: 訪問終了後、AIが会話データ全体を統合分析し、行政文書として完璧な「最終完成シート」と、経営者の心に響くパーソナルな**「事業継続力『お守り』レポート」**を全自動で執筆する。

最終化フェーズ: 最後の電子申請作業も、RPA技術などで可能な限り自動化し、計画の「作りっぱなし」を防ぐ。

さらに、単にリスクを指摘するだけでなく、経営者の心を動かし、商工会の共済加入へと自然に繋げるための心理的アプローチとして**「クライマックス・プレゼンテーション方式」**が考案された。これは、対話中にAIが検知したリスクを裏で静かにストックし続け、セッションの最後に一覧でまとめて提示するという手法である。これにより、経営者は自社が抱えるリスクの総量を直感的に認識し、その包括的な解決策として提示される共済の価値を最大化させ、自発的な加入決断を促す。この緻密に設計された体験のデザインにより、システムの構想は単なるツール開発を超え、人間中心の高度なコンサルティング手法の確立へと昇華した。

第二章：実装の深淵 - 現実世界の壁とデバッグの闘い
壮大な設計図を手に、プロジェクトはいよいよPython、VSCode、そしてGemini APIを用いた実装フェーズへと移行した。しかし、そこはアイデアが現実世界の複雑な物理法則と衝突する、試練の連続であった。開発の中心となったのは、システムの心臓部であるAI思考エンジンrisk_analyzer.pyの構築と、それを外部から利用可能にするAPI api_server.pyの開発であったが、この過程で開発者はソフトウェア開発における典型的な、しかし根深い数々の壁に直面する。

第一の壁：PowerShellとの格闘
APIの動作テストで最初に立ちはだかったのは、Windowsの標準ターミナルであるPowerShellの、世界標準とは異なる独自の「方言」であった。curlコマンドが実はInvoke-WebRequestという別コマンドの「あだ名（エイリアス）」であり、標準的なオプションが通用しない。JSONデータを送信しようとすれば、PowerShellの特殊な引用符の解釈がデータを破損させ、ファイルからデータを読み込もうとすれば、@記号が別の特殊機能（Splatting）のために予約されており、単純なコマンドがことごとく文法エラーとなる。このコマンドライン・デバッグの迷宮は、OS固有の環境差という、開発者が常に直面する現実の厳しさを浮き彫りにした。

第二の壁：文字コードの深淵
度重なるコマンドの修正の末、PowerShellとの対話方法を確立したかに見えたが、サーバーからは依然として「JSON形式が不正」というエラーが返ってきた。問題の根本原因を探るべく、ファイルの中身を直接表示させると、そこには遉ｾ髟ｷ...という典型的な「文字化け」が現れた。ファイルがWebの標準語であるUTF-8ではなく、Windows環境特有の、目に見えない特殊記号（BOM）が付いた形式や、Shift-JISなどで保存されていたのだ。このデータの根源的な表現形式の問題は、開発者に見えない壁として立ちはだかり、UTF-8でファイルを正しく保存し、さらにPowerShellに「UTF-8として読む」ことを明示的に指示するまで、長い試行錯誤を要した。

第三の壁：クラウド認証の関門
コマンドと文字コードの問題を乗り越え、ついにサーバーとの通信が確立されると、今度はGoogle Cloudからの認証エラーが開発者を待ち受けていた。DefaultCredentialsError（認証情報が見つからない）、PermissionDenied（APIが有効化されていない）、NotFound（指定したAIモデルが存在しない）といったエラー群は、クラウドサービスを利用するための「通行手形」がいかに重要であるかを物語っていた。Google AI StudioからAPIキーを取得し、.envファイルを用いて安全に管理する手法を確立。さらに、エラーメッセージが示すURLからGoogle Cloudコンソール上で「Generative Language API」を有効化し、AIモデル名を最新のものに更新することで、ようやくAIとの対話の道が開かれた。

第四の壁：Webセキュリティの原則
この長く困難なデバッグの最終関門は、Webの標準的なセキュリティ機構である**CORS（Cross-Origin Resource Sharing）**であった。FastAPIが自動生成するテストページからAPIを呼び出すと、ブラウザが「異なるドメインへのリクエストは危険」と判断し、通信をブロックしたのだ。これは、APIサーバー側にCORSMiddlewareを追加し、「このWebページからのアクセスは許可します」という「通行許可証」を発行することで解決された。この一連の闘いは、ソフトウェアがコードだけで完結するのではなく、OS、ネットワーク、ブラウザといった現実世界の複雑な環境との相互作用の中で初めて生命を宿すという、ソフトウェア工学の本質を体現するものであった。

第三章：アーキテクチャの進化 - 「思考の分割」による知性の獲得
度重なるデバッグの末に安定稼働したシステムは、しかし、AIの「知性」そのものに起因する、より本質的な課題を露呈した。AIは会話の中からリスクを的確に抽出するものの、その要約表現が実行のたびに微妙に揺らぐため、固定の対応表で解決策を紐付けるという当初の単純なロジックが破綻し、すべての解決策が「個別相談」となってしまったのである。このAIの「表現の揺らぎ」という課題は、プロンプトの改良という小手先の修正では解決できず、システムのアーキテクチャそのものを革命的に進化させることを開発者に強いた。

導き出されたブレークスルーは、AIの思考プロセスを機能的に分割する**「2段階AIアーキテクチャ」**への移行であった。

リスク抽出AI: 第一のAIは、会話ログ全体を読み込み、経営リスクを客観的に抽出して構造化データ（JSON）を出力することだけに集中する。

解決策マッピングAI: 第二のAIは、第一のAIが抽出した個々のリスク概要文を一つずつ受け取り、提示された共済リストの中から、その単一のリスクに対して最も適切な解決策を選択することだけに集中する。

この「思考の分割」により、各AIは一度に一つの単純明快なタスクだけを行えばよくなり、思考の負荷が軽減され、処理の精度と安定性が飛躍的に向上した。AIの柔軟性を障害と捉えるのではなく、その「判断能力」を信頼し、より高度なタスクを委任するという発想の転換が、システムに真の「知性」を宿らせた瞬間であった。この新しいアーキテクチャは、その後のテストで見事な成果を上げる。飲食店の会話ログからは「食材価格の高騰」という新たなリスクを発見し、それに対して「経営セーフティ共済」を提案。建設業の会話ログからは、津波、取引先依存、サイバー攻撃といった業種特有のリスクを正確に分析し、それぞれに地震保険や経営セーフティ共済を的確に紐付けた。システムは、多様な業種に対応できる高い汎用性と、文脈を深く理解する高度な推論能力を、ここに証明したのである。

第四章：クラウドへの飛翔 - ローコード戦略による未来の実装
盤石なバックエンド（頭脳）が完成したことで、プロジェクトの舞台は、それをクラウド上に展開し、最終的なGUIアプリケーションを構築する、未来に向けたフェーズへと移行した。ここでも、開発者のコーディング労力を最小化するという一貫した方針のもと、Google Cloud Platformが提供するサービス群をLEGOブロックのように組み合わせる**「ローコード開発」戦略**が採用された。

第一の飛翔：データベースの構築 (Firestore)
まず、アプリケーションが生成するデータを永続的に保存するための「ファイリングキャビネット」として、GoogleのFirestoreが選択された。開発者は、Google Cloudコンソール上で、データベースのモード（Native Mode）、ロケーション（利用者の拠点に近い大阪リージョン）、そしてセキュリティルール（開発を容易にするためのテストモード）などを、AIとの対話を通じて一つひとつ確認しながら設定。sessionsというコレクション（棚）を作成し、アプリケーションのデータ基盤をわずか数クリックで構築した。

第二の飛翔：思考エンジンのクラウド化 (Cloud Run)
次に、ローカルPCで開発されたAI思考エンジンを、24時間365日稼働する公開サーバーへと昇格させるため、GoogleのサーバーレスプラットフォームであるCloud Runが選択された。ここでも、開発者はAIのナビゲーションに従い、サービス名、リージョン、認証方式（未認証の呼び出しを許可）といった基本設定をGUI上で進めていく。そして、これまで複数ファイルに分かれていたPythonコードを、Cloud Runの作法に則って一つのmain.pyに統合。さらに、Gemini APIキーを安全に管理するため、コンソールの設定画面から環境変数としてキーを登録した。

このデプロイプロセスもまた、平坦ではなかった。Cloud Runが期待するポート番号での待機処理がコードに記述されていなかったために「コンテナ起動失敗」エラーが発生。さらに、コードのわずかなタイプミスが「構文エラー」を引き起こした。しかし、これらのエラーもまた、Cloud Runが提供する詳細なログを読み解き、AIが提示する修正案を適用することで迅速に解決された。度重なるデプロイの試行錯誤の末、ついにトラフィックのルーティングに成功。AI思考エンジンは、世界中からアクセス可能なあなた専用のAPIとして、クラウドの大空へと飛び立った。

未来への設計図：GUIの自動生成 (AppSheet)
バックエンドAPIという強固な基盤がクラウド上に確立されたことで、いよいよ最終目標であるGUIアプリケーションの構築が現実的な視野に入った。そのためのツールとして、プログラミングを一切せずに高機能なアプリを構築できるGoogleのノーコードプラットフォームAppSheetが選択された。今後の開発は、AppSheetの管理画面から、今回デプロイしたCloud RunのAPI URLをデータソースとして指定し、自動生成される画面を、当初設計したワイヤーフレームに沿ってマウス操作でカスタマイズしていくことになる。

結論：共創の果てに - 完成した「頭脳」と次なるステージ
この開発の軌跡は、一つのアイデアがAIとの共創を通じて、いかにして現実の課題を解決する力を持つインテリジェント・システムへと進化し得るかを示す、力強い証左である。PowerShellの迷宮から始まり、文字コード、クラウド認証、Webセキュリティ、そしてAI自身の揺らぎといった、ソフトウェア開発におけるありとあらゆる現実の壁を乗り越えた末に、プロジェクトは、強固で、賢く、そして柔軟なバックエンドシステムを完成させた。

特に、AIの思考プロセスを「リスク抽出」と「解決策マッピング」に分割するというアーキテクチャレベルでのブレークスルーは、AIとの協働における本質的な教訓を示している。すなわち、AIを万能の魔法の箱として扱うのではなく、その特性を深く理解し、得意なタスクに集中させることで、その能力を最大限に引き出すことができるのである。

Google Cloud Run上にデプロイされ、APIとして公開されたこの「頭脳」は、もはや単なるプロトタイプではない。それは、AppSheetという「身体」を得ることで、いつでも現場の商工会職員の手に渡り、中小企業経営者の未来を照らす強力な「Co-Pilot」となる準備が整った、完成された魂である。この長いデバッグと実装の旅路は、まさにAIと人間が互いの知性を補い合い、一つの目標に向かって粘り強く進む、新しい時代の開発スタイルの縮図であった。