思考メモ③
序論：インテリジェント・システムの最終試練
前稿において、アイデアの具現化からアプリケーションの骨格構築までを成し遂げた「AI Co-Pilot ジギョケイ策定支援システム」の開発は、いよいよ実用化に向けた最終段階の試練、すなわち、システムの安定性と精度を極限まで高めるためのデバッグと改良のフェーズに突入した。この段階で開発者が直面したのは、単なるプログラムのバグではなく、AIの「知性」そのものが持つ根源的な特性、すなわち**「表現の揺らぎ」**という予測不可能性であった。

AIは人間のように、同じ事象を表現する際に多様な言葉を用いる。この柔軟性はAIの高度な知性の証であるが、厳格なルールに基づいて動作する従来のプログラムにとっては、処理の失敗を引き起こす厄介なノイズとなり得る。このフェーズの中心的な課題は、このAIの知性ゆえに生じる不確実性にいかにして対処し、いかなる入力に対しても安定した精度の高い出力を保証するか、という点にあった。

本稿は、この難題に挑む開発の軌跡を詳細に記録したものである。それは、度重なる失敗と、そこから得られる深い洞察に基づく試行錯誤の物語である。単純なコードの修正に留まらず、ついにはシステムのアーキテクチャ（構造）そのものを革命的に進化させ、ついに安定稼働を達成。そして、完成した思考エンジンを、より広範なアプリケーションから利用可能にするための次なるステージ、API（Application Programming Interface）化へと進むまでの、技術的な冒険のすべてをここに詳述する。

第一章：AIの「揺らぎ」との格闘 - プロンプトエンジニアリングの限界
システムの基本ロジックが完成し、より現実に即した長い会話ログを用いたテストが開始されると、AIの「知性」に起因する深刻な問題が顕在化した。AIは会話の中から経営リスクを的確に抽出することには成功するものの、表示エンジンが提示する解決策が、すべてのリスクに対して画一的に**「個別相談」**となってしまう事態が再発したのである。

問題の根本原因の特定
詳細な分析の結果、原因はAIの**「表現の揺らぎ」**にあることが突き止められた。AIは入力された会話の文脈をその都度解釈し、最適だと判断した独自の言葉でリスクを要約する。例えば、火災のリスクについて、ある時は「厨房からの火災による店舗・設備の焼失リスク」と表現し、またある時は「火災による店舗被害」と表現する。人間にとっては些細な違いに過ぎないが、プログラムに内蔵された固定の対応表は、この表現の揺らぎに対応できず、キーとなる文字列が完全一致しないためにマッチングに失敗。その結果、安全策として設定されたデフォルトの「個別相談」を返してしまっていた。AIが指示を忠実に守り、「知らないことは知らないと言う」正直さの現れでもあったが、実用上は致命的な欠陥であった。

解決策の模索と失敗
この問題に対し、まず試みられたのは、AIへの指示、すなわちプロンプトをより厳密なものに改良するプロンプトエンジニアリングによるアプローチであった。AIに与える指示を、曖昧な「解決策リスト」から、より具体的な**「解決策マッピングルール」**へと進化させた。「もしリスクの要約文に『火災』というキーワードが含まれていたら、解決策は『火災共済』としなさい」といった、コンピュータが得意とするルールベースの指示を与えることで、AIの判断の揺らぎを制御しようと試みたのである。

しかし、この試みもまた失敗に終わった。結果は依然として「個別相談」のままであった。ここから得られた重要な洞察は、AIに「会話ログ全体を読んでリスクを抽出し、その場で即座にルールを適用して解決策を選択する」という、複数の複雑な思考タスクを一度に実行させようとすること自体の困難さであった。人間で言えば、会議の議事録を取りながら、同時にその内容に関する法的な問題点をリアルタイムで指摘し続けるようなものであり、高度なマルチタスク処理に失敗し、思考が混乱した結果、最も安全な選択肢に倒れてしまっていた。これは、単一の万能なプロンプトでAIの複雑な思考を完全に制御しようとすることの限界を明確に示すものであった。

第二章：アーキテクチャの革命 - 「思考の分割」によるブレークスルー
プロンプトエンジニアリングによる解決策が行き詰まったことで、開発者は問題の根本原因がプロンプトの内容という表層的な部分ではなく、AIに複雑な作業を一度に強いるシステムアーキテクチャ（構造）そのものにあるという結論に達した。この深い洞察に基づき、システムの設計思想を根底から覆す、抜本的かつ革命的な解決策が導入された。それが、AIの思考プロセスを機能的に分割するというアプローチである。

2段階AIアーキテクチャの実装
この新たな設計思想に基づき、システムの心臓部であるrisk_analyzer.pyの構造は全面的に刷新された。これまで単一のAI（関数）が担っていた複雑なタスクは、それぞれが単純な責務を持つ二つの独立したAIへと分割された。

リスク抽出AI (risk_extraction_model): この第一のAIの役割は、ただ一つ。入力された会話ログ全体を読み込み、事業継続を脅かす可能性のある経営リスクを客観的に抽出して、JSON形式で出力することだけに集中する。解決策の提案といった余計な思考は一切行わない。

解決策マッピングAI (map_risk_to_solution): この第二のAIの役割も、極めてシンプルである。第一のAIが抽出した「個々のリスク概要文」を一つずつインプットとして受け取り、その単一のリスクに対して、提示された解決策リストの中から最も適切なものを一つだけ選択して返すことだけに集中する。

この「思考の分割」は、複雑なシステムを小さな独立したサービスの集合体として構築する「マイクロサービスアーキテクチャ」の思想に通じる。各AIは、一度に一つの単純明快なタスクだけを行えばよいため、思考の負荷が劇的に軽減され、処理の精度と安定性が飛躍的に向上することが期待された。

アーキテクチャ変更に伴う新たなデバッグ
しかし、この大規模な構造変更は、アプリケーションの複雑性が増したことに起因する新たな問題を生んだ。まず、アプリケーションの起動元である司令塔main_app.pyでAPIキーの認証処理が行われていないために、部品であるrisk_analyzer.pyがAPIを呼び出そうとした時点でDefaultCredentialsErrorという認証エラーが発生した。これは、認証処理をアプリケーションのエントリーポイントであるmain_app.pyに集約することで解決された。

次に、各ファイルの関数定義の食い違いによるTypeErrorが発生した。これは、思考エンジンの改良に伴い不要となった引数solution_mapが、古いコードが残るmain_app.pyから依然として渡されようとしていたために起きたエラーであった。この問題を根本的に解決するため、main_app.py、risk_analyzer.py、presentation_generator.pyの全ファイルのコードを最新版に同期させる**「最終同期」**作業が行われた。この一連のデバッグプロセスを経て、新しいアーキテクチャはついに安定稼働へと至ったのである。

第三章：システムの完成と汎用性の証明
度重なるデバッグと、思考プロセスを2段階に分割するというアーキテクチャレベルでの革命的な進化を経て、ついに「AI Co-Pilot ジギョケイ策定支援システム」の思考エンジンは、完成の域に達した。その能力を検証するため、最終テストが実施された。

完全なる成功
まず、これまで問題を引き起こしてきた飲食店の会話ログが再度入力された。すると、システムは完璧な動作を見せた。AIは会話の中から、当初想定されていた4つのリスクに加え、経営者の冒頭の発言から**「食材価格の高騰による利益減少リスク」**まで、合計5つのリスクを自律的に、かつ正確に抽出した。

そして、最大の懸案であった解決策の提案は、驚くべき精度を示した。厨房のオーブン故障や火災といった物理的な損害リスクには「火災共済」、食中毒という賠償責任リスクには「ビジネス総合保険」、そして経営者の就業不能リスクには「商工会の福祉共済」と、それぞれのリスクの本質を見抜いた上で、論理的かつ適切な解決策を動的に紐付けた。

特に注目すべきは、「食材価格の高騰」という直接的な事故ではない経営環境の変化に起因するリスクに対し、取引先の倒産など外部要因による経営圧迫に備えるためのセーフティネットである**「経営セーフティ共済」**を提案した点である。これは、AIが各共済制度の表面的な名称だけでなく、その本質的な目的や機能を深く理解した上で、最も近い概念の解決策を導き出したことを示す、極めて高度な推論能力の証明であった。2段階AIアーキテクチャの導入が、この高精度な結果を生み出す鍵となったことは疑いようがなかった。

汎用性の検証
次に、システムの能力が特定の業種に偏っていないか、その汎用性を検証するため、業種を建設業に変えた会話ログで追加テストが実施された。このテストでも、AIは卓越した能力を発揮した。会話の中から、建設業特有のリスクである「南海トラフ地震による津波での重機損壊リスク」、「主要取引先への高い依存度と連鎖倒産リスク」、そして「設計図などの情報資産に対するサイバー攻撃リスク」などを的確に分析。そして、それぞれのリスクに対して、地震保険、経営セーフティ共済などを正しく紐付けることに成功した。これにより、本システムが多様な業種の経営課題に対応できる高い汎用性を持つことが実証された。

継続的な学習と改善
この建設業のテストの中で、唯一「サイバー攻撃リスク」に対する解決策が「個別相談」となった。これはエラーではなく、AIに渡した「教科書」、すなわちプロンプト内の解決策リストの説明文に、サイバー攻撃をカバーする共済の記述がなかったために、AIが正直に「明確に当てはまるものがない」と判断した結果であった。この結果を受け、開発者はrisk_analyzer.py内のプロンプトを即座に修正し、ビジネス総合保険の説明に「サイバー攻撃による損害なども幅広く補償する」という一文を追記した。これにより、AIの知識はアップデートされ、システムはさらに賢くなった。このプロセスは、システムが一度完成して終わりではなく、運用を通じて得られた知見を基に、継続的に改善・学習していくモデルの有効性を示唆している。

結論：次なるステージへ - 思考エンジンのAPI化
度重なるデバッグのループ、プロンプトエンジニアリングの試行錯誤、そして思考プロセスを分割するというアーキテクチャレベルでのブレークスルーを経て、「AI Co-Pilot ジギョケイ策定支援システム」の思考エンジンは、ついに安定性と高い精度、そして汎用性を兼ね備えた完成形へと到達した。これは、プロジェクトにおける極めて重要なマイルストーンであった。

思考エンジンという強力な「頭脳」が完成したことで、プロジェクトは次なる大きなステージ、すなわち、この頭脳を将来開発するGUI（グラフィカル・ユーザー・インターフェース）アプリケーションから簡単かつ柔軟に利用可能にするためのAPI（Application Programming Interface）化へと移行した。APIとは、アプリケーションの機能やデータを外部の他のプログラムから呼び出すための「受付窓口」であり、これを用意することで、システムのバックエンド（頭脳）とフロントエンド（見た目）を疎結合、すなわち独立して開発・修正できる状態にすることができる。

このAPI化のために、技術選定として、Pythonで高速なAPIを容易に構築できるフレームワークである**「FastAPI」**が採用された。api_server.pyという新しいスクリプトが作成され、そこには外部からHTTPリクエストとして会話ログを受け取り、思考エンジンで分析した結果をJSON形式で返す/analyzeというAPIエンドポイント（受付窓口）が実装された。

APIサーバーの起動後、その動作を確認する最終段階で、開発者は再び現実世界の細かな壁に直面した。Windowsの標準ターミナルであるPowerShellでは、一般的に使われるcurlコマンドが独自仕様のエイリアスとなっており、APIテストでエラーが発生したのである。これは、PowerShell専用のInvoke-WebRequestコマンドや、curl.exeを直接呼び出すといった具体的な解決策によって乗り越えられた。このエピソードは、壮大なシステム開発といえども、その実態は、こうした細やかで実践的な知識とトラブルシューティング能力の積み重ねの上に成り立っていることを象OB徴している。

思考エンジンのAPI化という確かな一歩を踏み出したことで、このプロトタイプは、当初の構想であったタブレット上で直感的に操作できる対話型アプリケーションへと発展していくための、揺るぎない技術的基盤を確立した。それは、現実世界での実用化に向けた、決定的な前進であった。